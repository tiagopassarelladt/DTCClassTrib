unit ReformaTributaria.ClassTrib;

interface

uses
  System.SysUtils,
  System.Generics.Collections,
  System.Classes,
  System.DateUtils;

type
  TClassTribMetadata = record
    CST: string;
    Codigo: string;
    Descricao: string;
    ArtigoLei: string;
    TipoTributacao: string;
    TomadorEspecifico: string;
    ExigeNBSouNCM: Boolean;
    SemNBScomCodServico: Boolean;
    TributacaoNFSe: string;
    OutroCampoNFSe: string;
    Observacao: string;
    PercentualReducaoAliquota: Double;
    TributosRelacionados: string;
    DataInicioVigencia: TDateTime;
    DataFimVigencia: TDateTime;
    TituloCapitulo: string;
    CreditoAnterior: string;
    CreditoParaFrente: string;
  end;

  IClassTribRepository = interface
    ['{BD7A5F1D-8E9C-4A7F-9B2C-F312E940B123}']
    function GetByCST(const CST: string): TArray<TClassTribMetadata>;
    function GetByCodigo(const Codigo: string): TClassTribMetadata;
    function GetAllCSTs: TArray<string>;
    function ValidateClassTrib(const CST, Codigo: string): Boolean;
    function GetDescricao(const Codigo: string): string;
    function GetArtigoLei(const Codigo: string): string;
    function GetTomadorEspecifico(const Codigo: string): string;
    function GetObservacao(const Codigo: string): string;
    function GetPercentualReducao(const Codigo: string): Double;
    function GetVigencia(const Codigo: string): TDateTime;
    function IsCodigoAtivo(const Codigo: string): Boolean;
    function GetByFiltro(const Filtro: string): TArray<TClassTribMetadata>;
    function ConverterICMSParaIBS(const CSTICMS: string): TClassTribMetadata;
    function ConverterCSOSNParaIBS(const CSOSN: string): TClassTribMetadata;
    function ConverterPisCofinsParaCBS(const CSTPisCofins: string): TClassTribMetadata;
  end;

  TClassTribService = class(TInterfacedObject, IClassTribRepository)
  private
    FMetadataMap: TObjectDictionary<string, TList<TClassTribMetadata>>;
    FMapeamentoICMS: TDictionary<string, string>;
    FMapeamentoCSOSN: TDictionary<string, string>;
    FMapeamentoPisCofins: TDictionary<string, string>;

    procedure LoadClassTribData;
    procedure LoadMapeamentos;
    procedure AddClassTribMetadata(const Metadata: TClassTribMetadata);
    function GetMetadataFromList(const List: TList<TClassTribMetadata>;
      const Index: Integer): TClassTribMetadata;
  public
    constructor Create;
    destructor Destroy; override;

    function GetByCST(const CST: string): TArray<TClassTribMetadata>;
    function GetByCodigo(const Codigo: string): TClassTribMetadata;
    function GetAllCSTs: TArray<string>;
    function ValidateClassTrib(const CST, Codigo: string): Boolean;
    function GetDescricao(const Codigo: string): string;
    function GetArtigoLei(const Codigo: string): string;
    function GetTomadorEspecifico(const Codigo: string): string;
    function GetObservacao(const Codigo: string): string;
    function GetPercentualReducao(const Codigo: string): Double;
    function GetVigencia(const Codigo: string): TDateTime;
    function IsCodigoAtivo(const Codigo: string): Boolean;
    function GetByFiltro(const Filtro: string): TArray<TClassTribMetadata>;
    function ConverterICMSParaIBS(const CSTICMS: string): TClassTribMetadata;
    function ConverterCSOSNParaIBS(const CSOSN: string): TClassTribMetadata;
    function ConverterPisCofinsParaCBS(const CSTPisCofins: string): TClassTribMetadata;

    class function CreateDefault: IClassTribRepository;
  end;

implementation

{ TClassTribService }

constructor TClassTribService.Create;
begin
  inherited;
  FMetadataMap := TObjectDictionary<string, TList<TClassTribMetadata>>.Create([doOwnsValues]);
  FMapeamentoICMS := TDictionary<string, string>.Create;
  FMapeamentoCSOSN := TDictionary<string, string>.Create;
  FMapeamentoPisCofins := TDictionary<string, string>.Create;

  LoadMapeamentos;
  LoadClassTribData;
end;

destructor TClassTribService.Destroy;
begin
  FMetadataMap.Free;
  FMapeamentoICMS.Free;
  FMapeamentoCSOSN.Free;
  FMapeamentoPisCofins.Free;
  inherited;
end;

class function TClassTribService.CreateDefault: IClassTribRepository;
begin
  Result := TClassTribService.Create;
end;

procedure TClassTribService.AddClassTribMetadata(const Metadata: TClassTribMetadata);
var
  List: TList<TClassTribMetadata>;
begin
  if not FMetadataMap.TryGetValue(Metadata.CST, List) then
  begin
    List := TList<TClassTribMetadata>.Create;
    FMetadataMap.Add(Metadata.CST, List);
  end;
  List.Add(Metadata);
end;

function TClassTribService.GetByCST(const CST: string): TArray<TClassTribMetadata>;
var
  List: TList<TClassTribMetadata>;
begin
  if FMetadataMap.TryGetValue(CST, List) then
    Result := List.ToArray
  else
    SetLength(Result, 0);
end;

function TClassTribService.GetByCodigo(const Codigo: string): TClassTribMetadata;
var
  List: TList<TClassTribMetadata>;
  Item: TClassTribMetadata;
begin
  Result := Default(TClassTribMetadata);

  for List in FMetadataMap.Values do
  begin
    for Item in List do
    begin
      if Item.Codigo = Codigo then
        Exit(Item);
    end;
  end;
end;

function TClassTribService.GetAllCSTs: TArray<string>;
begin
  Result := FMetadataMap.Keys.ToArray;
end;

function TClassTribService.ValidateClassTrib(const CST, Codigo: string): Boolean;
var
  List: TList<TClassTribMetadata>;
  Item: TClassTribMetadata;
begin
  Result := False;

  if FMetadataMap.TryGetValue(CST, List) then
  begin
    for Item in List do
    begin
      if (Item.Codigo = Codigo) and IsCodigoAtivo(Codigo) then
        Exit(True);
    end;
  end;
end;

function TClassTribService.GetDescricao(const Codigo: string): string;
var
  Metadata: TClassTribMetadata;
begin
  Metadata := GetByCodigo(Codigo);
  Result := Metadata.Descricao;
end;

function TClassTribService.GetMetadataFromList(const List: TList<TClassTribMetadata>;
  const Index: Integer): TClassTribMetadata;
begin
  Result := Default(TClassTribMetadata);

  if (List = nil) or (Index < 0) or (Index >= List.Count) then
    Exit;

  Result := List[Index];
end;

function TClassTribService.GetArtigoLei(const Codigo: string): string;
var
  Metadata: TClassTribMetadata;
begin
  Metadata := GetByCodigo(Codigo);
  Result := Metadata.ArtigoLei;
end;

function TClassTribService.GetTomadorEspecifico(const Codigo: string): string;
var
  Metadata: TClassTribMetadata;
begin
  Metadata := GetByCodigo(Codigo);
  Result := Metadata.TomadorEspecifico;
end;

function TClassTribService.GetObservacao(const Codigo: string): string;
var
  Metadata: TClassTribMetadata;
begin
  Metadata := GetByCodigo(Codigo);
  Result := Metadata.Observacao;
end;

function TClassTribService.GetPercentualReducao(const Codigo: string): Double;
var
  Metadata: TClassTribMetadata;
begin
  Metadata := GetByCodigo(Codigo);
  Result := Metadata.PercentualReducaoAliquota;
end;

function TClassTribService.GetVigencia(const Codigo: string): TDateTime;
var
  Metadata: TClassTribMetadata;
begin
  Metadata := GetByCodigo(Codigo);
  Result := Metadata.DataInicioVigencia;
end;

function TClassTribService.IsCodigoAtivo(const Codigo: string): Boolean;
var
  Metadata: TClassTribMetadata;
begin
  Metadata := GetByCodigo(Codigo);
  Result := (Metadata.DataFimVigencia = 0) or
            (Date <= Metadata.DataFimVigencia);
end;

function TClassTribService.GetByFiltro(const Filtro: string): TArray<TClassTribMetadata>;
var
  List: TList<TClassTribMetadata>;
  Item: TClassTribMetadata;
  ResultList: TList<TClassTribMetadata>;
begin
  ResultList := TList<TClassTribMetadata>.Create;
  try
    for List in FMetadataMap.Values do
    begin
      for Item in List do
      begin
        if (Pos(UpperCase(Filtro), UpperCase(Item.Descricao)) > 0) or
           (Pos(UpperCase(Filtro), UpperCase(Item.ArtigoLei)) > 0) or
           (Pos(UpperCase(Filtro), UpperCase(Item.TituloCapitulo)) > 0) then
        begin
          ResultList.Add(Item);
        end;
      end;
    end;
    Result := ResultList.ToArray;
  finally
    ResultList.Free;
  end;
end;

function TClassTribService.ConverterICMSParaIBS(const CSTICMS: string): TClassTribMetadata;
var
  CClassTrib: string;
begin
  Result := Default(TClassTribMetadata);

  // Verifica se o código ICMS existe no mapeamento
  if FMapeamentoICMS.TryGetValue(CSTICMS, CClassTrib) then
    Result := GetByCodigo(CClassTrib);

  // Se não encontrou, tenta criar uma instância mais genérica baseada no CST
  if Result.Codigo = '' then
  begin
    // Conversão direta do CST ICMS para CST IBS
    case StrToIntDef(CSTICMS, -1) of
      0:  CClassTrib := '000001'; // Tributada integralmente
      10: CClassTrib := '620001'; // Tributada com ST
      20: CClassTrib := '210001'; // Com redução da BC
      30: CClassTrib := '620002'; // Isenta com ST
      40: CClassTrib := '400001'; // Isenta
      41: CClassTrib := '410001'; // Não tributada
      50: CClassTrib := '550001'; // Suspensão
      51: CClassTrib := '510001'; // Diferimento
      60: CClassTrib := '620005'; // ICMS cobrado anteriormente por ST
      70: CClassTrib := '620002'; // Redução da BC com ST
      90: CClassTrib := '900001'; // Outras
    else
      CClassTrib := '900001'; // Outro/Não identificado
    end;

    Result := GetByCodigo(CClassTrib);
  end;
end;

function TClassTribService.ConverterCSOSNParaIBS(const CSOSN: string): TClassTribMetadata;
var
  CClassTrib: string;
begin
  Result := Default(TClassTribMetadata);

  // Verifica se o código CSOSN existe no mapeamento
  if FMapeamentoCSOSN.TryGetValue(CSOSN, CClassTrib) then
    Result := GetByCodigo(CClassTrib);

  // Se não encontrou, tenta criar uma instância mais genérica baseada no CSOSN
  if Result.Codigo = '' then
  begin
    // Conversão direta do CSOSN para CST IBS
    case StrToIntDef(CSOSN, -1) of
      101, 102: CClassTrib := '000001'; // Tributada pelo Simples
      103:      CClassTrib := '400001'; // Isenção no Simples
      201..203: CClassTrib := '620002'; // Com ST no Simples
      300:      CClassTrib := '410001'; // Imune
      400:      CClassTrib := '410001'; // Não tributada
      500:      CClassTrib := '620001'; // ICMS cobrado por ST
      900:      CClassTrib := '900001'; // Outros
    else
      CClassTrib := '900001'; // Outro/Não identificado
    end;

    Result := GetByCodigo(CClassTrib);
  end;
end;

function TClassTribService.ConverterPisCofinsParaCBS(const CSTPisCofins: string): TClassTribMetadata;
var
  CClassTrib: string;
begin
  Result := Default(TClassTribMetadata);

  // Verifica se o código PIS/COFINS existe no mapeamento
  if FMapeamentoPisCofins.TryGetValue(CSTPisCofins, CClassTrib) then
    Result := GetByCodigo(CClassTrib);

  // Se não encontrou, tenta criar uma instância mais genérica baseada no CST
  if Result.Codigo = '' then
  begin
    // Conversão direta do CST PIS/COFINS para CST CBS
    case StrToIntDef(CSTPisCofins, -1) of
      1:       CClassTrib := '000001'; // Alíquota Básica
      2:       CClassTrib := '011001'; // Alíquota Diferenciada
      3:       CClassTrib := '620001'; // Alíquota por Unidade
      4:       CClassTrib := '620005'; // Monofásica - Revenda Zero
      5:       CClassTrib := '620002'; // Substituição Tributária
      6:       CClassTrib := '200001'; // Alíquota Zero
      7:       CClassTrib := '400001'; // Isenta
      8:       CClassTrib := '410001'; // Sem Incidência
      9:       CClassTrib := '550001'; // Suspensão
      49:      CClassTrib := '900001'; // Outras Saídas
      50..66:  CClassTrib := '000001'; // Operações com crédito
      70..75:  CClassTrib := '410001'; // Operações sem crédito
      98:      CClassTrib := '900001'; // Outras entradas
      99:      CClassTrib := '900001'; // Outras
    else
      CClassTrib := '900001'; // Outro/Não identificado
    end;

    Result := GetByCodigo(CClassTrib);
  end;
end;

procedure TClassTribService.LoadMapeamentos;
begin
  // Mapeamento CST ICMS -> CClassTrib
  FMapeamentoICMS.Add('00', '000001');
  FMapeamentoICMS.Add('10', '620001');
  FMapeamentoICMS.Add('20', '210001');
  FMapeamentoICMS.Add('30', '620003');
  FMapeamentoICMS.Add('40', '400001');
  FMapeamentoICMS.Add('41', '410001');
  FMapeamentoICMS.Add('50', '550001');
  FMapeamentoICMS.Add('51', '510001');
  FMapeamentoICMS.Add('60', '620005');
  FMapeamentoICMS.Add('70', '620002');
  FMapeamentoICMS.Add('90', '900001');

  // Mapeamento CSOSN -> CClassTrib
  FMapeamentoCSOSN.Add('101', '000001');
  FMapeamentoCSOSN.Add('102', '000001');
  FMapeamentoCSOSN.Add('103', '400001');
  FMapeamentoCSOSN.Add('201', '620002');
  FMapeamentoCSOSN.Add('202', '620002');
  FMapeamentoCSOSN.Add('203', '620003');
  FMapeamentoCSOSN.Add('300', '410005');
  FMapeamentoCSOSN.Add('400', '410001');
  FMapeamentoCSOSN.Add('500', '620005');
  FMapeamentoCSOSN.Add('900', '900001');

  // Mapeamento CST PIS/COFINS -> CClassTrib
  FMapeamentoPisCofins.Add('01', '000001');
  FMapeamentoPisCofins.Add('02', '011001');
  FMapeamentoPisCofins.Add('03', '620001');
  FMapeamentoPisCofins.Add('04', '620005');
  FMapeamentoPisCofins.Add('05', '620002');
  FMapeamentoPisCofins.Add('06', '200001');
  FMapeamentoPisCofins.Add('07', '400001');
  FMapeamentoPisCofins.Add('08', '410001');
  FMapeamentoPisCofins.Add('09', '550001');
  FMapeamentoPisCofins.Add('49', '900001');
  FMapeamentoPisCofins.Add('50', '000001');
  FMapeamentoPisCofins.Add('51', '000001');
  FMapeamentoPisCofins.Add('52', '000001');
  FMapeamentoPisCofins.Add('53', '000001');
  FMapeamentoPisCofins.Add('54', '000001');
  FMapeamentoPisCofins.Add('55', '000001');
  FMapeamentoPisCofins.Add('56', '000001');
  FMapeamentoPisCofins.Add('60', '410001');
  FMapeamentoPisCofins.Add('70', '410001');
  FMapeamentoPisCofins.Add('71', '410001');
  FMapeamentoPisCofins.Add('72', '410001');
  FMapeamentoPisCofins.Add('73', '410001');
  FMapeamentoPisCofins.Add('74', '410001');
  FMapeamentoPisCofins.Add('75', '410001');
  FMapeamentoPisCofins.Add('98', '900001');
  FMapeamentoPisCofins.Add('99', '900001');
end;

procedure TClassTribService.LoadClassTribData;
var
  Metadata: TClassTribMetadata;
begin
  // CST 000 - Tributação integral
  Metadata := Default(TClassTribMetadata);
  Metadata.CST := '000';
  Metadata.Codigo := '000001';
  Metadata.Descricao := 'Situações tributadas integralmente pelo IBS e CBS.';
  Metadata.TipoTributacao := 'Tributação integral';
  Metadata.TributacaoNFSe := '1 - Operação tributável';
  Metadata.Observacao := 'Não há correlação entre ISS e IBS. Pode haver operação tributável para um imposto e com isenção para outro. Pode haver situação em que o IBS é tributado normalmente, mas a CBS apresenta regime diferenciado (art. 296 a 304) Prouni e operações com veículos.';
  Metadata.DataInicioVigencia := StrToDate('01/01/2026');
  AddClassTribMetadata(Metadata);

  Metadata := Default(TClassTribMetadata);
  Metadata.CST := '000';
  Metadata.Codigo := '000002';
  Metadata.Descricao := 'Exploração de via, observado o art. 11 da Lei Complementar nº 214, de 2025.';
  Metadata.ArtigoLei := 'Art. 11, VIII';
  Metadata.TipoTributacao := 'Tributação integral';
  Metadata.TituloCapitulo := 'Livro I Do Imposto Sobre Bens E Serviços (IBS) E Da Contribuição Social Sobre Bens E Serviços (CBS)\nTítulo I Das Normas Gerais Do IBS E Da CBS\nCapítulo II Do IBS E Da CBS Sobre Operações\nSeção IV Do Local Da Operação';
  Metadata.DataInicioVigencia := StrToDate('01/01/2026');
  AddClassTribMetadata(Metadata);

  Metadata := Default(TClassTribMetadata);
  Metadata.CST := '000';
  Metadata.Codigo := '000003';
  Metadata.Descricao := 'Regime automotivo - projetos incentivados, observado o art. 311 da Lei Complementar nº 214, de 2025.';
  Metadata.ArtigoLei := 'Art. 311';
  Metadata.TipoTributacao := 'Tributação integral';
  Metadata.TituloCapitulo := 'Livro I Do Imposto Sobre Bens E Serviços (IBS) E Da Contribuição Social Sobre Bens E Serviços (CBS)\nTítulo VI Dos Regimes Diferenciados Da CBS\nCapítulo II Do Regime Automotivo';
  Metadata.DataInicioVigencia := StrToDate('01/01/2026');
  AddClassTribMetadata(Metadata);

  Metadata := Default(TClassTribMetadata);
  Metadata.CST := '000';
  Metadata.Codigo := '000004';
  Metadata.Descricao := 'Regime automotivo - projetos incentivados, observado o art. 312 da Lei Complementar nº 214, de 2025.';
  Metadata.ArtigoLei := 'Art. 312';
  Metadata.TipoTributacao := 'Tributação integral';
  Metadata.CreditoAnterior := 'Manutenção de crédito (alíquota zero)';
  Metadata.CreditoParaFrente := 'N (Art. 47)';
  Metadata.DataInicioVigencia := StrToDate('01/01/2026');
  AddClassTribMetadata(Metadata);

  // CST 010 - Tributação com alíquotas uniformes - operações setor financeiro
  Metadata := Default(TClassTribMetadata);
  Metadata.CST := '010';
  Metadata.Codigo := '010001';
  Metadata.Descricao := 'Operações do FGTS não realizadas pela Caixa Econômica Federal, observado o art. 212 da Lei Complementar nº 214, de 2025.';
  Metadata.ArtigoLei := 'Art. 212';
  Metadata.TipoTributacao := 'Tributação com alíquotas uniformes - operações setor financeiro';
  Metadata.CreditoAnterior := 'Manutenção de crédito (alíquota zero)';
  Metadata.CreditoParaFrente := 'N (Art. 47)';
  Metadata.DataInicioVigencia := StrToDate('01/01/2026');
  AddClassTribMetadata(Metadata);

  // CST 011 - Tributação com alíquotas uniformes reduzidas
  Metadata := Default(TClassTribMetadata);
  Metadata.CST := '011';
  Metadata.Codigo := '011001';
  Metadata.Descricao := 'Planos de assistência funerária, observado o art. 236 da Lei Complementar nº 214, de 2025.';
  Metadata.ArtigoLei := 'Art. 236';
  Metadata.TipoTributacao := 'Tributação com alíquotas uniformes reduzidas em 60%';
  Metadata.DataInicioVigencia := StrToDate('01/01/2026');
  AddClassTribMetadata(Metadata);

  Metadata := Default(TClassTribMetadata);
  Metadata.CST := '011';
  Metadata.Codigo := '011002';
  Metadata.Descricao := 'Planos de assistência à saúde, observado o art. 237 da Lei Complementar nº 214, de 2025.';
  Metadata.ArtigoLei := 'Art. 237';
  Metadata.TipoTributacao := 'Tributação com alíquotas uniformes reduzidas em 60%';
  Metadata.PercentualReducaoAliquota := 60;
  Metadata.DataInicioVigencia := StrToDate('01/01/2026');
  AddClassTribMetadata(Metadata);

  Metadata := Default(TClassTribMetadata);
  Metadata.CST := '011';
  Metadata.Codigo := '011003';
  Metadata.Descricao := 'Intermediação de planos de assistência à saúde, observado o art. 240 da Lei Complementar nº 214, de 2025.';
  Metadata.ArtigoLei := 'Art. 240';
  Metadata.TipoTributacao := 'Tributação com alíquotas uniformes reduzidas em 60%';
  Metadata.DataInicioVigencia := StrToDate('01/01/2026');
  AddClassTribMetadata(Metadata);

  Metadata := Default(TClassTribMetadata);
  Metadata.CST := '011';
  Metadata.Codigo := '011004';
  Metadata.Descricao := 'Concursos e prognósticos, observado o art. 246 da Lei Complementar nº 214, de 2025.';
  Metadata.ArtigoLei := 'Art. 246';
  Metadata.TipoTributacao := 'Tributação com alíquotas uniformes reduzidas em 60%';
  Metadata.DataInicioVigencia := StrToDate('01/01/2026');
  AddClassTribMetadata(Metadata);

  Metadata := Default(TClassTribMetadata);
  Metadata.CST := '011';
  Metadata.Codigo := '011005';
  Metadata.Descricao := 'Planos de assistência à saúde de animais domésticos, observado o art. 243 da Lei Complementar nº 214, de 2025.';
  Metadata.ArtigoLei := 'Art. 243';
  Metadata.TipoTributacao := 'Tributação com alíquotas uniformes reduzidas em 30%';
  Metadata.DataInicioVigencia := StrToDate('01/01/2026');
  AddClassTribMetadata(Metadata);

  // CST 200 - Alíquota zero
  Metadata := Default(TClassTribMetadata);
  Metadata.CST := '200';
  Metadata.Codigo := '200001';
  Metadata.Descricao := 'Aquisições de máquinas, de aparelhos, de instrumentos, de equipamentos, de matérias-primas, de produtos intermediários e de materiais de embalagem realizadas entre empresas autorizadas a operar em zonas de processamento de exportação, observado o art. 103 da Lei Complementar nº 214, de 2025.';
  Metadata.ArtigoLei := 'Art. 103';
  Metadata.TipoTributacao := 'Alíquota zero';
  Metadata.CreditoAnterior := 'Manutenção de crédito (alíquota zero)';
  Metadata.CreditoParaFrente := 'N (Art. 49)';
  Metadata.PercentualReducaoAliquota := 100;
  Metadata.ExigeNBSouNCM := True;
  Metadata.DataInicioVigencia := StrToDate('01/01/2026');
  AddClassTribMetadata(Metadata);

  // Adicionar os demais códigos...

  // CST 400 - Isenção
  Metadata := Default(TClassTribMetadata);
  Metadata.CST := '400';
  Metadata.Codigo := '400001';
  Metadata.Descricao := 'Fornecimento de serviços de transporte público coletivo de passageiros rodoviário e metroviário de caráter urbano, semiurbano e metropolitano, sob regime de autorização, permissão ou concessão pública, observado o art. 157 da Lei Complementar nº 214, de 2025.';
  Metadata.ArtigoLei := 'Art. 157';
  Metadata.TipoTributacao := 'Isenção';
  Metadata.CreditoAnterior := 'Anulação proporcional (Art. 32)';
  Metadata.CreditoParaFrente := 'N (Art. 49)';
  Metadata.ExigeNBSouNCM := True;
  Metadata.DataInicioVigencia := StrToDate('01/01/2026');
  AddClassTribMetadata(Metadata);

  // CST 410 - Imunidade e não incidência
  Metadata := Default(TClassTribMetadata);
  Metadata.CST := '410';
  Metadata.Codigo := '410001';
  Metadata.Descricao := 'Fornecimento de bonificações quando constem do respectivo documento fiscal e que não dependam de evento posterior, observado o art. 5º da Lei Complementar nº 214, de 2025.';
  Metadata.ArtigoLei := 'Art. 5º, § 1º, I';
  Metadata.TipoTributacao := 'Imunidade e não incidência';
  Metadata.DataInicioVigencia := StrToDate('01/01/2026');
  AddClassTribMetadata(Metadata);

  Metadata := Default(TClassTribMetadata);
  Metadata.CST := '410';
  Metadata.Codigo := '410004';
  Metadata.Descricao := 'Exportações de bens e serviços, observado o art. 8º da Lei Complementar nº 214, de 2025.';
  Metadata.ArtigoLei := 'Art. 8º';
  Metadata.TipoTributacao := 'Imunidade e não incidência';
  Metadata.CreditoAnterior := 'Manutenção de crédito (exportação)';
  Metadata.CreditoParaFrente := 'N (Art. 49)';
  Metadata.TributacaoNFSe := '3 - Exportação de serviço';
  Metadata.Observacao := 'Para alguns serviços, o IBS será com exportação se o tomador estiver no exterior. Já para o ISS ainda é necessário verificar os efeitos.';
  Metadata.DataInicioVigencia := StrToDate('01/01/2026');
  AddClassTribMetadata(Metadata);

  Metadata := Default(TClassTribMetadata);
  Metadata.CST := '410';
  Metadata.Codigo := '410005';
  Metadata.Descricao := 'Fornecimentos realizados pela União, pelos Estados, pelo Distrito Federal e pelos Municípios, observado o art. 9º da Lei Complementar nº 214, de 2025.';
  Metadata.ArtigoLei := 'Art. 9º, I e § 1º';
  Metadata.TipoTributacao := 'Imunidade e não incidência';
  Metadata.CreditoAnterior := 'Anulação proporcional (Art. 32)';
  Metadata.CreditoParaFrente := 'N (Art. 49)';
  Metadata.TomadorEspecifico := 'Adm. Pública';
  Metadata.TributacaoNFSe := '2 - Imunidade';
  Metadata.OutroCampoNFSe := '1 - Patrimônio, renda ou serviços, uns dos outros (CF88, Art 150, VI, a)';
  Metadata.Observacao := 'Há correlação. Não é necessário obrigar o preenchimento de ambos os campos. Talvez seja necessário um tratamento especial para o item 1, pois a alíquota zero não é para todas as transferências. Para tomador União a alíquota do IBS é zero, mas a alíquota da CBS será a soma de CBS + IBS. Para tomador Estado/Município, a alíquota da CBS será zero, mas haverá IBS+CBS para o contratante.';
  Metadata.DataInicioVigencia := StrToDate('01/01/2026');
  AddClassTribMetadata(Metadata);

  // CST 510 - Diferimento
  Metadata := Default(TClassTribMetadata);
  Metadata.CST := '510';
  Metadata.Codigo := '510001';
  Metadata.Descricao := 'Operações, sujeitas a diferimento, com energia elétrica ou com direitos a ela relacionados, relativas à geração, comercialização, distribuição e transmissão, observado o art. 28 da Lei Complementar nº 214, de 2025.';
  Metadata.ArtigoLei := 'Art. 28, § 1º';
  Metadata.TipoTributacao := 'Diferimento';
  Metadata.TributosRelacionados := 'ICMS';
  Metadata.DataInicioVigencia := StrToDate('01/01/2026');
  AddClassTribMetadata(Metadata);

  // CST 550 - Suspensão
  Metadata := Default(TClassTribMetadata);
  Metadata.CST := '550';
  Metadata.Codigo := '550001';
  Metadata.Descricao := 'Exportações de bens materiais, observado o art. 82 da Lei Complementar nº 214, de 2025.';
  Metadata.ArtigoLei := 'Art. 82';
  Metadata.TipoTributacao := 'Suspensão';
  Metadata.DataInicioVigencia := StrToDate('01/01/2026');
  AddClassTribMetadata(Metadata);

  // CST 620 - Tributação monofásica
  Metadata := Default(TClassTribMetadata);
  Metadata.CST := '620';
  Metadata.Codigo := '620001';
  Metadata.Descricao := 'Tributação monofásica sobre combustíveis, observado o art. 172 da Lei Complementar nº 214, de 2025.';
  Metadata.ArtigoLei := 'Art. 172';
  Metadata.TipoTributacao := 'Tributação monofásica';
  Metadata.TributosRelacionados := 'ICMS';
  Metadata.DataInicioVigencia := StrToDate('01/01/2026');
  AddClassTribMetadata(Metadata);

  Metadata := Default(TClassTribMetadata);
  Metadata.CST := '620';
  Metadata.Codigo := '620002';
  Metadata.Descricao := 'Tributação monofásica com responsabilidade pela retenção sobre combustíveis, observado o art. 178 da Lei Complementar nº 214, de 2025.';
  Metadata.ArtigoLei := 'Art. 178';
  Metadata.TipoTributacao := 'Tributação monofásica';
  Metadata.DataInicioVigencia := StrToDate('01/01/2026');
  AddClassTribMetadata(Metadata);

  Metadata := Default(TClassTribMetadata);
  Metadata.CST := '620';
  Metadata.Codigo := '620003';
  Metadata.Descricao := 'Tributação monofásica com tributos retidos por responsabilidade sobre combustíveis, observado o art. 178 da Lei Complementar nº 214, de 2025.';
  Metadata.ArtigoLei := 'Art. 178';
  Metadata.TipoTributacao := 'Tributação monofásica';
  Metadata.DataInicioVigencia := StrToDate('01/01/2026');
  AddClassTribMetadata(Metadata);

  Metadata := Default(TClassTribMetadata);
  Metadata.CST := '620';
  Metadata.Codigo := '620005';
  Metadata.Descricao := 'Tributação monofásica sobre combustíveis cobrada anteriormente, observador o art. 180 da Lei Complementar nº 214, de 2025.';
  Metadata.ArtigoLei := 'Art. 180';
  Metadata.TipoTributacao := 'Tributação monofásica';
  Metadata.Observacao := 'Vendas a consumidor final, por essa razão não há referência legislativa.';
  Metadata.DataInicioVigencia := StrToDate('01/01/2026');
  AddClassTribMetadata(Metadata);

  // CST 800 - Transferência de crédito
  Metadata := Default(TClassTribMetadata);
  Metadata.CST := '800';
  Metadata.Codigo := '800001';
  Metadata.Descricao := 'Fusão, cisão ou incorporação, observado o art. 55 da Lei Complementar nº 214, de 2025.';
  Metadata.ArtigoLei := 'Art. 55';
  Metadata.TipoTributacao := 'Transferência de crédito';
  Metadata.DataInicioVigencia := StrToDate('01/01/2026');
  AddClassTribMetadata(Metadata);

  // CST 810 - Ajustes
  Metadata := Default(TClassTribMetadata);
  Metadata.CST := '810';
  Metadata.Codigo := '810001';
  Metadata.Descricao := 'Crédito presumido sobre o valor apurado nos fornecimentos a partir da Zona Franca de Manaus, observado o art. 450 da Lei Complementar nº 214, de 2025.';
  Metadata.ArtigoLei := 'Art. 450';
  Metadata.TipoTributacao := 'Ajustes';
  Metadata.DataInicioVigencia := StrToDate('01/01/2026');
  AddClassTribMetadata(Metadata);

  // CST 820 - Tributação em declaração de regime específico
  Metadata := Default(TClassTribMetadata);
  Metadata.CST := '820';
  Metadata.Codigo := '820001';
  Metadata.Descricao := 'Documento com informações de fornecimento de serviços de planos de assinstência à saúde, mas com tributação realizada por outro meio, observado o art. 235 da Lei Complementar nº 214, de 2025.';
  Metadata.ArtigoLei := 'Art. 235';
  Metadata.TipoTributacao := 'Tributação em declaração de regime específico';
  Metadata.DataInicioVigencia := StrToDate('01/01/2026');
  AddClassTribMetadata(Metadata);

  // CST 900 - Outros
  Metadata := Default(TClassTribMetadata);
  Metadata.CST := '900';
  Metadata.Codigo := '900001';
  Metadata.Descricao := 'Outras operações não classificadas.';
  Metadata.TipoTributacao := 'Outros';
  Metadata.DataInicioVigencia := StrToDate('01/01/2026');
  AddClassTribMetadata(Metadata);

  // Adicionar mais CSTs conforme os dados da planilha

  // CST 200 - Alíquota zero (exemplos adicionais)
  Metadata := Default(TClassTribMetadata);
  Metadata.CST := '200';
  Metadata.Codigo := '200013';
  Metadata.Descricao := 'Fornecimento de tampões higiênicos, absorventes higiênicos internos ou externos, descartáveis ou reutilizáveis, calcinhas absorventes e coletores menstruais, observado o art. 147 da Lei Complementar nº 214, de 2025.';
  Metadata.ArtigoLei := 'Art. 147';
  Metadata.TipoTributacao := 'Alíquota zero';
  Metadata.CreditoAnterior := 'Manutenção de crédito (alíquota zero)';
  Metadata.CreditoParaFrente := 'N (Art. 49)';
  Metadata.PercentualReducaoAliquota := 100;
  Metadata.ExigeNBSouNCM := True;
  Metadata.TributosRelacionados := 'ICMS';
  Metadata.DataInicioVigencia := StrToDate('01/01/2026');
  AddClassTribMetadata(Metadata);

  Metadata := Default(TClassTribMetadata);
  Metadata.CST := '200';
  Metadata.Codigo := '200028';
  Metadata.Descricao := 'Fornecimento dos serviços de educação relacionados no Anexo II da Lei Complementar nº 214, de 2025, com a especificação das respectivas classificações da Nomenclatura Brasileira de Serviços, Intangíveis e Outras Operações que Produzam Variações no Patrimônio (NBS), observado o art. 129 da Lei Complementar nº 214, de 2025.';
  Metadata.ArtigoLei := 'Art. 129';
  Metadata.TipoTributacao := 'Alíquota reduzida em 60%';
  Metadata.PercentualReducaoAliquota := 60;
  Metadata.ExigeNBSouNCM := True;
  Metadata.DataInicioVigencia := StrToDate('01/01/2026');
  AddClassTribMetadata(Metadata);

  Metadata := Default(TClassTribMetadata);
  Metadata.CST := '200';
  Metadata.Codigo := '200052';
  Metadata.Descricao := 'Prestação de serviços das seguintes profissões intelectuais de natureza científica, literária ou artística, submetidas à fiscalização por conselho profissional: administradores, advogados, arquitetos e urbanistas, assistentes sociais, bibliotecários, biólogos, contabilistas, economistas, economistas domésticos, profissionais de educação física, engenheiros e agrônomos, estatísticos, médicos veterinários e zootecnistas, museólogos, químicos, profissionais de relações públicas, técnicos industriais e técnicos agrícolas, observado o art. 127 da Lei Complementar nº 214, de 2025.';
  Metadata.ArtigoLei := 'Art. 127, I a XVIII';
  Metadata.TipoTributacao := 'Alíquota reduzida em 30%';
  Metadata.TributacaoNFSe := 'Sociedades uniprofissionais';
  Metadata.PercentualReducaoAliquota := 30;
  Metadata.SemNBScomCodServico := True;
  Metadata.DataInicioVigencia := StrToDate('01/01/2026');
  AddClassTribMetadata(Metadata);

  // CST 210 - Alíquota reduzida com redutor de base de cálculo
  Metadata := Default(TClassTribMetadata);
  Metadata.CST := '210';
  Metadata.Codigo := '210001';
  Metadata.Descricao := 'Redutor social aplicado uma única vez na alienação de bem imóvel residencial novo, observado o art. 259 da Lei Complementar nº 214, de 2025.';
  Metadata.ArtigoLei := 'Arts. 259 e 261';
  Metadata.TipoTributacao := 'Alíquota reduzida em 50% com redutor de base de cálculo';
  Metadata.DataInicioVigencia := StrToDate('01/01/2026');
  AddClassTribMetadata(Metadata);
end;

end.
